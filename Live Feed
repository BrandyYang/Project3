import hypermedia.video.*;

import java.awt.Rectangle;
import java.awt.Point;

import processing.net.*;

Client client;

PImage img;

OpenCV opencv;

int w = 720;
int h = 400;
int threshold = 80;

boolean find=true;
float time;

PFont font;

void setup() {

  size( w, h );

  client = new Client(this, "127.0.0.1", 5204);

  opencv = new OpenCV( this );
  opencv.capture(w, h);

  font = loadFont( "AndaleMono.vlw" );
  textFont( font );

  img = loadImage("1.png");

  println( "Drag mouse inside sketch window to change threshold" );
  println( "Press space bar to record background image" );
}



void draw() {

  background(0);
  if (client.available()>0)
  {
    if (client.read()==100)
    {
      Caputre();
    }
    if( client.read() == 50)
    {
      background(0);
    }
  }
}





void Caputre()
{
  opencv.read();


      //opencv.flip( OpenCV.FLIP_HORIZONTAL );
      opencv.convert(OpenCV.GRAY);
      opencv.invert();
      image( opencv.image(), 0, 0);  


      //image( opencv.image(), 10, 10 );              // RGB image
      //image( opencv.image(OpenCV.GRAY), 20+w, 10 );   // GRAY image
      //image( opencv.image(OpenCV.MEMORY), 10, 20+h ); // image in memory


      opencv.read();
      //opencv.flip( OpenCV.FLIP_HORIZONTAL );
      opencv.convert(OpenCV.GRAY);
      opencv.blur(OpenCV.BLUR, 3);
      opencv.contrast(30);


      opencv.absDiff();
      opencv.threshold(threshold);
      //image( opencv.image(OpenCV.GRAY), 20+w, 20+h ); // absolute difference image
      //image( opencv.image(), 20+w, 20+h );



      // working with blobs
      Blob[] blobs = opencv.blobs( 1500, w*h/3, 5, true );

      //noFill();

      for ( int i=0; i<blobs.length; i++ ) {

        Rectangle bounding_rect = blobs[i].rectangle;
        float area = blobs[i].area;

        float circumference = blobs[i].length;
        Point centroid = blobs[i].centroid;
        Point[] points = blobs[i].points;

        // rectangle
        noFill();
        //fill(255,13,13,80);
        stroke( blobs[i].isHole ? 128 : 64 );
        rect( bounding_rect.x, bounding_rect.y, bounding_rect.width, bounding_rect.height );


        // centroid



        fill(255);
        strokeWeight(1);
        stroke(200, 50);


        if ( points.length>0 ) {
          beginShape();
          for ( int j=0; j<points.length; j++ ) {
            vertex( points[j].x, points[j].y );
          }
          endShape(CLOSE);
        }
        stroke(0);
        line( centroid.x-15, centroid.y, centroid.x-5, centroid.y );
        line( centroid.x, centroid.y-15, centroid.x, centroid.y-5 );
        line( centroid.x+5, centroid.y, centroid.x+15, centroid.y );
        line( centroid.x, centroid.y+5, centroid.x, centroid.y+15 );



        noStroke();
        fill(0);
        text( area, centroid.x+5, centroid.y+5 );

        noStroke();
        fill(0);
        text( circumference, centroid.x+5, centroid.y+15 );
      }


      noStroke();
      fill(0);
      textFont(font, 20);
      text( minute()+":"+second(), 600, 390 );

      textFont(font);

      tint(0);
      image(img, 0, 0);
      tint(200);
}

///////////////////////////////////////////////
void keyPressed() {
  if ( key==' ' ) opencv.remember();
}

void mouseDragged() {
  threshold = int( map(mouseX, 0, width, 0, 255) );
}

public void stop() {
  opencv.stop();
  super.stop();
}
